services:
  postgres:
    image: postgres:15
    container_name: diagnocare-db
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USERNAME}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    # TO COMMENT ON DEPLOYMENT
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USERNAME} -d ${DB_NAME}"]
      interval: 5s
      timeout: 5s
      retries: 5

  pgadmin:
    image: dpage/pgadmin4
    container_name: pgadmin4
    restart: always
    ports:
      - "8888:80"
    environment:
      PGADMIN_DEFAULT_EMAIL: ${DB_USERNAME}@ok.com
      PGADMIN_DEFAULT_PASSWORD: ${DB_PASSWORD}
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    depends_on:
      - postgres

  registry-service:
    build: ./RegistryService/.
    restart: always
    ports:
      - '8761:8761'
    # env_file:
    #   - .env

  auth-service:
    build: ./AuthService/.
    restart: always
    # ports:
    #   - '8081:8081'
    env_file:
      - .env
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/${DB_NAME}
      - eureka.client.serviceUrl.defaultZone=http://registry-service:8761/eureka/
    depends_on:
      postgres:
        condition: service_healthy
      registry-service:
        condition: service_started

  gateway-service:
    build: ./GatewayService/.
    restart: always
    ports:
      - '8765:8765'
    env_file:
      - .env
    environment:
      - eureka.client.serviceUrl.defaultZone=http://registry-service:8761/eureka/
    depends_on:
      - auth-service

  # Kafka setup using KRaft mode 
  kafka:
    image: apache/kafka:latest
    container_name: kafka-broker
    restart: always
    ports:
      - "9092:9092"      # Internal broker port
      - "29092:29092"    # External access port
    environment:
      # KRaft Configuration (Kafka without Zookeeper)
      KAFKA_NODE_ID: 1
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@kafka:29093
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      
      # Listener Configuration
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092,CONTROLLER://0.0.0.0:29093,EXTERNAL://0.0.0.0:29092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,EXTERNAL://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,CONTROLLER:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      
      # Cluster Configuration
      KAFKA_CLUSTER_ID: diagnocare-kafka-cluster-2024
      KAFKA_BROKER_ID: 1
      
      # Topic Configuration
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_DEFAULT_REPLICATION_FACTOR: 1
      KAFKA_MIN_INSYNC_REPLICAS: 1
      
      # Log Configuration
      KAFKA_LOG_DIRS: /var/lib/kafka/data
      KAFKA_LOG_RETENTION_HOURS: 168
      KAFKA_LOG_SEGMENT_BYTES: 1073741824
      KAFKA_LOG_RETENTION_CHECK_INTERVAL_MS: 300000
      
      # Performance tuning
      KAFKA_NUM_NETWORK_THREADS: 3
      KAFKA_NUM_IO_THREADS: 8
      KAFKA_SOCKET_SEND_BUFFER_BYTES: 102400
      KAFKA_SOCKET_RECEIVE_BUFFER_BYTES: 102400
      KAFKA_SOCKET_REQUEST_MAX_BYTES: 104857600
    volumes:
      - kafka_data:/var/lib/kafka/data
    healthcheck:
      test: nc -z localhost 9092 || exit -1
      interval: 10s
      timeout: 5s
      retries: 5
    depends_on:
      - gateway-service

  # Kafka UI for monitoring and management
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    restart: always
    ports:
      - "8083:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: diagnocare-cluster
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
      KAFKA_CLUSTERS_0_PROPERTIES_SECURITY_PROTOCOL: PLAINTEXT
    depends_on:
      kafka:
        condition: service_healthy

volumes:
  postgres_data:
  pgadmin_data:
  kafka_data: